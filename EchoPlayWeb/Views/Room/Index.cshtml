@{
    ViewData["Title"] = "–ß–∞—Ç –∫–æ–º–Ω–∞—Ç–∞";
}

<div class="container">
    <h1>–ß–∞—Ç –∫–æ–º–Ω–∞—Ç–∞: <span id="roomIdDisplay">@ViewData["RoomId"]</span></h1>
    <div class="user-info">–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: <span id="currentUserDisplay"></span></div>

    <div class="chat-box">
        <ul id="messagesList" class="message-list"></ul>
        <div class="message-input">
            <input type="text" id="messageInput" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." />
            <button id="sendButton">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
<script>
    const roomId = "@ViewData["RoomId"]";
    const currentUser = "User_" + Math.random().toString(36).substring(2, 8);
    const serverUrl = "https://localhost:7222"; // –ü–æ–º–µ–Ω—è–π –Ω–∞ –Ω—É–∂–Ω—ã–π –ø–æ—Ä—Ç/–¥–æ–º–µ–Ω

    const messagesList = document.getElementById("messagesList");
    const messageInput = document.getElementById("messageInput");
    const sendButton = document.getElementById("sendButton");
    const currentUserDisplay = document.getElementById("currentUserDisplay");

    currentUserDisplay.textContent = currentUser;

    const chatRoomConnection = new signalR.HubConnectionBuilder()
        .withUrl(`${serverUrl}/chatHub`)
        .configureLogging(signalR.LogLevel.Information)
        .build();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    chatRoomConnection.on("Notify", (message) => addSystemMessage(message));
    chatRoomConnection.on("ReceiveMessage", (user, message, messageId) => addMessageToChat(user, message, messageId));
    chatRoomConnection.on("UpdateMessage", (messageId, newMessage, user) => updateMessageInChat(messageId, newMessage, user));
    chatRoomConnection.on("DeleteMessage", (messageId, user) => deleteMessageFromChat(messageId, user));

    // UI
    function addMessageToChat(user, message, messageId) {
        const li = document.createElement("li");
        li.className = "chat-message";
        li.setAttribute("data-message-id", messageId);
        li.innerHTML = `
            <div class="message-header">
                <strong>${user}</strong>
                <div class="message-actions">
                    <button onclick="startEditMessage('${messageId}')">‚úèÔ∏è</button>
                    <button onclick="deleteMessage('${messageId}')">üóëÔ∏è</button>
                </div>
            </div>
            <div id="content-${messageId}">${message}</div>
        `;
        messagesList.appendChild(li);
        scrollToBottom();
    }

    function updateMessageInChat(messageId, newMessage, user) {
        const el = document.getElementById(`content-${messageId}`);
        if (el) {
            el.textContent = newMessage;
            addSystemMessage(`${user} –æ–±–Ω–æ–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ`);
        }
    }

    function deleteMessageFromChat(messageId, user) {
        const li = document.querySelector(`li[data-message-id="${messageId}"]`);
        if (li) {
            li.remove();
            addSystemMessage(`${user} —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ`);
        }
    }

    function addSystemMessage(msg) {
        const li = document.createElement("li");
        li.className = "system-message";
        li.textContent = msg;
        messagesList.appendChild(li);
        scrollToBottom();
    }

    function scrollToBottom() {
        messagesList.scrollTop = messagesList.scrollHeight;
    }

    async function sendMessage() {
        const message = messageInput.value.trim();
        if (message && chatRoomConnection.state === signalR.HubConnectionState.Connected) {
            try {
                await chatRoomConnection.invoke("SendMessage", roomId, currentUser, message);
                messageInput.value = "";
            } catch (err) {
                addSystemMessage("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
            }
        }
    }

    async function startEditMessage(messageId) {
        const content = document.getElementById(`content-${messageId}`);
        const currentText = content.textContent;
        content.innerHTML = `
            <input type="text" id="edit-input-${messageId}" value="${currentText}" />
            <button onclick="confirmEdit('${messageId}')">‚úì</button>
            <button onclick="cancelEdit('${messageId}', '${currentText}')">‚úï</button>
        `;
    }

    async function confirmEdit(messageId) {
        const newMessage = document.getElementById(`edit-input-${messageId}`).value.trim();
        if (newMessage) {
            await chatRoomConnection.invoke("UpdateMessage", roomId, currentUser, messageId, newMessage);
        }
    }

    function cancelEdit(messageId, originalText) {
        const content = document.getElementById(`content-${messageId}`);
        content.textContent = originalText;
    }

    async function deleteMessage(messageId) {
        if (confirm("–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?")) {
            await chatRoomConnection.invoke("DeleteMessage", roomId, currentUser, messageId);
        }
    }

    async function startConnection() {
        try {
            await chatRoomConnection.start();
            await chatRoomConnection.invoke("JoinRoom", roomId);
            addSystemMessage(`–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        } catch (err) {
            addSystemMessage("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...");
            setTimeout(startConnection, 5000);
        }
    }

    sendButton.addEventListener("click", sendMessage);
    messageInput.addEventListener("keypress", (e) => {
        if (e.key === "Enter") sendMessage();
    });

    window.addEventListener("beforeunload", async () => {
        try {
            await chatRoomConnection.invoke("LeaveRoom", roomId);
        } catch {}
    });

    window.startEditMessage = startEditMessage;
    window.deleteMessage = deleteMessage;
    window.confirmEdit = confirmEdit;
    window.cancelEdit = cancelEdit;

    startConnection();
</script>

<style>
    .container { max-width: 800px; margin: 0 auto; padding: 20px; font-family: Arial; }
    .chat-box { border: 1px solid #ccc; border-radius: 8px; padding: 15px; background: #f9f9f9; }
    .message-list { list-style: none; padding: 0; height: 400px; overflow-y: auto; background: #fff; margin-bottom: 10px; border: 1px solid #eee; border-radius: 4px; }
    .message-list li { padding: 8px; border-bottom: 1px solid #eee; }
    .chat-message { background: #f0f0f0; padding: 10px; border-radius: 4px; margin-bottom: 10px; }
    .message-header { display: flex; justify-content: space-between; }
    .message-actions button { background: none; border: none; cursor: pointer; }
    .system-message { color: #666; font-style: italic; }
    .message-input { display: flex; gap: 10px; }
    #messageInput { flex: 1; padding: 10px; }
    #sendButton { padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; }
</style>
