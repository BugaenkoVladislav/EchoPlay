@{
    ViewData["Title"] = "–ß–∞—Ç –∫–æ–º–Ω–∞—Ç–∞";
}

<div class="app-container">
    <!-- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ -->
    <div class="content-area">
        <!-- –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã -->
        <div class="video-container">
            <video id="localVideo" autoplay muted playsinline style="display:none;"></video>
            <video id="remoteVideo" autoplay playsinline style="display:none;"></video>
            <div id="audioOnlyIndicator" style="display:none;">
                <div class="audio-call-icon">üé§</div>
                <div>–ê—É–¥–∏–æ-–∑–≤–æ–Ω–æ–∫</div>
            </div>
            <div id="noDevicesMessage" class="warning-message" style="display:none;">
                –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç.
            </div>
        </div>

        <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ -->
        <div class="device-controls" id="deviceControls" style="display:none;">
            <div class="device-select-group">
                <label>
                    <input type="checkbox" id="enableVideo"> –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–º–µ—Ä—É
                </label>
                <select id="cameraSelect" class="device-select" disabled></select>
            </div>
            <div class="device-select-group">
                <label for="microphoneSelect">–ú–∏–∫—Ä–æ—Ñ–æ–Ω:</label>
                <select id="microphoneSelect" class="device-select" disabled></select>
            </div>
            <div class="device-select-group">
                <label for="speakerSelect">–î–∏–Ω–∞–º–∏–∫–∏:</label>
                <select id="speakerSelect" class="device-select" disabled></select>
            </div>
        </div>

        <!-- –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–º -->
        <div class="webrtc-controls">
            <button id="requestAccessBtn">–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º</button>
            <button id="callButton" disabled>–ü–æ–∑–≤–æ–Ω–∏—Ç—å</button>
            <button id="hangupButton" disabled>–ó–∞–≤–µ—Ä—à–∏—Ç—å</button>
        </div>

        <!-- –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π -->
        <div id="onlineUsersContainer" style="display: none;">
            <h3>–û–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</h3>
            <ul id="onlineUsersList"></ul>
        </div>

        <!-- –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö -->
        <div id="errorContainer" class="error-message" style="display:none;"></div>
    </div>

    <!-- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —á–∞—Ç–∞ -->
    <div class="chat-container">
        <h1>–ß–∞—Ç –∫–æ–º–Ω–∞—Ç–∞: <span id="roomIdDisplay">@ViewData["RoomId"]</span></h1>
        <div class="user-info">–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: <span id="currentUserDisplay"></span></div>

        <div class="chat-box">
            <ul id="messagesList" class="message-list"></ul>
            <div class="message-input">
                <input type="text" id="messageInput" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." />
                <button id="sendButton">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
<script>
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const roomId = "@ViewData["RoomId"]";
    const currentUser = "User_" + Math.random().toString(36).substring(2, 8);
    const serverUrl = "https://localhost:7222";

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const appState = {
        localStream: null,
        peerConnection: null,
        currentCallConnectionId: null,
        hasAudioPermission: false,
        hasVideoPermission: false,
        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
    };

    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const elements = {
        // –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã
        localVideo: document.getElementById('localVideo'),
        remoteVideo: document.getElementById('remoteVideo'),
        audioOnlyIndicator: document.getElementById('audioOnlyIndicator'),
        noDevicesMessage: document.getElementById('noDevicesMessage'),
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
        enableVideo: document.getElementById('enableVideo'),
        cameraSelect: document.getElementById('cameraSelect'),
        microphoneSelect: document.getElementById('microphoneSelect'),
        speakerSelect: document.getElementById('speakerSelect'),
        deviceControls: document.getElementById('deviceControls'),
        
        // –ö–Ω–æ–ø–∫–∏
        requestAccessBtn: document.getElementById('requestAccessBtn'),
        callButton: document.getElementById('callButton'),
        hangupButton: document.getElementById('hangupButton'),
        
        // –ß–∞—Ç
        messagesList: document.getElementById('messagesList'),
        messageInput: document.getElementById('messageInput'),
        sendButton: document.getElementById('sendButton'),
        currentUserDisplay: document.getElementById('currentUserDisplay'),
        
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –æ—à–∏–±–∫–∏
        onlineUsersList: document.getElementById('onlineUsersList'),
        onlineUsersContainer: document.getElementById('onlineUsersContainer'),
        errorContainer: document.getElementById('errorContainer')
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SignalR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    const chatRoomConnection = new signalR.HubConnectionBuilder()
        .withUrl(`${serverUrl}/chatHub`)
        .configureLogging(signalR.LogLevel.Information)
        .build();

    const webRtcConnection = new signalR.HubConnectionBuilder()
        .withUrl(`${serverUrl}/WebRTCHub`)
        .configureLogging(signalR.LogLevel.Information)
        .build();

    // ==================== –§—É–Ω–∫—Ü–∏–∏ —á–∞—Ç–∞ ====================
    function addSystemMessage(message) {
        const li = document.createElement("li");
        li.className = "system-message";
        li.textContent = message;
        elements.messagesList.appendChild(li);
        scrollToBottom();
    }

    function addChatMessage(user, message, messageId) {
        const li = document.createElement("li");
        li.className = "chat-message";
        li.setAttribute("data-message-id", messageId);
        li.innerHTML = `
            <div class="message-header">
                <strong>${user}</strong>
                <div class="message-actions">
                    <button onclick="startEditMessage('${messageId}')">‚úèÔ∏è</button>
                    <button onclick="deleteMessage('${messageId}')">üóëÔ∏è</button>
                </div>
            </div>
            <div id="content-${messageId}">${message}</div>
        `;
        elements.messagesList.appendChild(li);
        scrollToBottom();
    }

    async function sendMessage() {
        const message = elements.messageInput.value.trim();
        if (message && chatRoomConnection.state === signalR.HubConnectionState.Connected) {
            try {
                await chatRoomConnection.invoke("SendMessage", roomId, currentUser, message);
                elements.messageInput.value = "";
            } catch (err) {
                showError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
            }
        }
    }

    // ==================== WebRTC —Ñ—É–Ω–∫—Ü–∏–∏ ====================
    async function requestDeviceAccess() {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø —Ö–æ—Ç—è –±—ã –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false })
                .catch(async () => {
                    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º, –ø—Ä–æ–±—É–µ–º —Å –≤–∏–¥–µ–æ
                    return await navigator.mediaDevices.getUserMedia({ audio: true, video: true });
                });

            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            const devices = await navigator.mediaDevices.enumerateDevices();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –µ—Å—Ç—å
            appState.hasAudioPermission = devices.some(d => d.kind === 'audioinput' && d.label !== '');
            appState.hasVideoPermission = devices.some(d => d.kind === 'videoinput' && d.label !== '');

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ (–Ω–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
            stream.getTracks().forEach(track => track.stop());

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await updateDeviceLists();
            elements.deviceControls.style.display = 'block';
            elements.requestAccessBtn.textContent = '–û–±–Ω–æ–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞';
            hideError();

            // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            if (!appState.hasAudioPermission && !appState.hasVideoPermission) {
                elements.noDevicesMessage.style.display = 'block';
                return false;
            }

            return true;
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º:', err);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç.');
            elements.noDevicesMessage.style.display = 'block';
            return false;
        }
    }

    async function updateDeviceLists() {
        try {
            const devices = await navigator.mediaDevices.enumerateDevices();
            
            const cameras = devices.filter(d => d.kind === 'videoinput');
            const microphones = devices.filter(d => d.kind === 'audioinput');
            const speakers = devices.filter(d => d.kind === 'audiooutput');
            
            populateSelect(elements.cameraSelect, cameras, '–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            populateSelect(elements.microphoneSelect, microphones, '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
            populateSelect(elements.speakerSelect, speakers, '–î–∏–Ω–∞–º–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –≤–∏–¥–µ–æ
            elements.enableVideo.disabled = cameras.length === 0;
            elements.enableVideo.checked = cameras.length > 0 && appState.hasVideoPermission;
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º select'—ã –µ—Å–ª–∏ –µ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            elements.cameraSelect.disabled = cameras.length === 0;
            elements.microphoneSelect.disabled = microphones.length === 0;
            elements.speakerSelect.disabled = speakers.length === 0;

            return { cameras, microphones, speakers };
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', err);
            showError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
            return { cameras: [], microphones: [], speakers: [] };
        }
    }

    function populateSelect(selectElement, devices, emptyMessage) {
        selectElement.innerHTML = '';
        
        if (devices.length === 0) {
            const option = document.createElement('option');
            option.text = emptyMessage;
            selectElement.appendChild(option);
            selectElement.disabled = true;
            return;
        }
        
        const defaultOption = document.createElement('option');
        defaultOption.text = '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é';
        defaultOption.value = '';
        selectElement.appendChild(defaultOption);
        
        devices.forEach(device => {
            const label = device.label || `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${device.kind}`;
            const option = document.createElement('option');
            option.value = device.deviceId;
            option.text = label;
            selectElement.appendChild(option);
        });
        
        selectElement.disabled = false;
    }

    async function startLocalStream() {
        try {
            const constraints = {
                audio: elements.microphoneSelect.value ? 
                    { deviceId: { exact: elements.microphoneSelect.value } } : true,
                video: elements.enableVideo.checked && elements.cameraSelect.value ? 
                    { deviceId: { exact: elements.cameraSelect.value } } : false
            };

            appState.localStream = await navigator.mediaDevices.getUserMedia(constraints);
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if (constraints.video) {
                elements.localVideo.srcObject = appState.localStream;
                elements.localVideo.style.display = 'block';
                elements.audioOnlyIndicator.style.display = 'none';
            } else {
                elements.localVideo.style.display = 'none';
                elements.audioOnlyIndicator.style.display = 'block';
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–Ω–∞–º–∏–∫–æ–≤
            if (elements.speakerSelect.value && 'setSinkId' in elements.remoteVideo) {
                await elements.remoteVideo.setSinkId(elements.speakerSelect.value);
            }
            
            elements.callButton.disabled = false;
            await webRtcConnection.invoke("GetOnlineUsers");
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞:', err);
            showError('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–µ–¥–∏–∞–ø–æ—Ç–æ–∫–∞: ' + err.message);
            elements.callButton.disabled = true;
        }
    }

    function initiateCall(targetConnectionId) {
        if (!appState.localStream) {
            showError('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
            return;
        }

        try {
            appState.currentCallConnectionId = targetConnectionId;
            createPeerConnection();
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            appState.localStream.getTracks().forEach(track => {
                appState.peerConnection.addTrack(track, appState.localStream);
            });
            
            // –°–æ–∑–¥–∞–µ–º offer
            appState.peerConnection.createOffer({
                offerToReceiveAudio: true,
                offerToReceiveVideo: elements.enableVideo.checked
            })
            .then(offer => appState.peerConnection.setLocalDescription(offer))
            .then(() => {
                webRtcConnection.invoke("SendSignal", appState.currentCallConnectionId, "offer", appState.peerConnection.localDescription);
            })
            .catch(err => {
                console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer:', err);
                showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞');
                hangUp();
            });
            
            elements.callButton.disabled = true;
            elements.hangupButton.disabled = false;
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞:', err);
            showError('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞');
        }
    }

    function createPeerConnection() {
        try {
            appState.peerConnection = new RTCPeerConnection({ iceServers: appState.iceServers });
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            appState.peerConnection.ontrack = event => {
                if (event.track.kind === 'video') {
                    elements.remoteVideo.srcObject = event.streams[0];
                    elements.remoteVideo.style.display = 'block';
                    elements.audioOnlyIndicator.style.display = 'none';
                } else if (event.track.kind === 'audio') {
                    if (!elements.remoteVideo.srcObject) {
                        elements.remoteVideo.srcObject = event.streams[0];
                    }
                    elements.remoteVideo.style.display = 'none';
                    elements.audioOnlyIndicator.style.display = 'block';
                }
            };
            
            appState.peerConnection.onicecandidate = event => {
                if (event.candidate && appState.currentCallConnectionId) {
                    webRtcConnection.invoke("SendSignal", appState.currentCallConnectionId, "candidate", event.candidate);
                }
            };
            
            appState.peerConnection.oniceconnectionstatechange = () => {
                if (appState.peerConnection.iceConnectionState === 'failed') {
                    showError('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ');
                    hangUp();
                }
            };
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', err);
            throw err;
        }
    }

    function hangUp() {
        try {
            if (appState.peerConnection) {
                appState.peerConnection.close();
                appState.peerConnection = null;
            }
            
            if (appState.localStream) {
                appState.localStream.getTracks().forEach(track => track.stop());
                appState.localStream = null;
            }
            
            elements.localVideo.srcObject = null;
            elements.localVideo.style.display = 'none';
            
            elements.remoteVideo.srcObject = null;
            elements.remoteVideo.style.display = 'none';
            
            elements.audioOnlyIndicator.style.display = 'none';
            appState.currentCallConnectionId = null;
            elements.callButton.disabled = false;
            elements.hangupButton.disabled = true;
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', err);
            showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞');
        }
    }

    // ==================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ====================
    function showError(message) {
        elements.errorContainer.textContent = message;
        elements.errorContainer.style.display = 'block';
    }

    function hideError() {
        elements.errorContainer.style.display = 'none';
    }

    function scrollToBottom() {
        elements.messagesList.scrollTop = elements.messagesList.scrollHeight;
    }

    // ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ====================
    function setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞
        elements.requestAccessBtn.addEventListener('click', async () => {
            const success = await requestDeviceAccess();
            if (success) {
                await startLocalStream();
            }
        });

        // –ß–µ–∫–±–æ–∫—Å –≤–∏–¥–µ–æ
        elements.enableVideo.addEventListener('change', async () => {
            if (appState.localStream) {
                const videoTracks = appState.localStream.getVideoTracks();
                if (elements.enableVideo.checked) {
                    await startLocalStream();
                } else {
                    videoTracks.forEach(track => track.stop());
                    elements.localVideo.style.display = 'none';
                    elements.audioOnlyIndicator.style.display = 'block';
                }
            }
        });

        // –ö–Ω–æ–ø–∫–∏ –∑–≤–æ–Ω–∫–∞
        elements.callButton.addEventListener('click', () => {
            if (appState.currentCallConnectionId) {
                initiateCall(appState.currentCallConnectionId);
            }
        });

        elements.hangupButton.addEventListener('click', hangUp);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        elements.sendButton.addEventListener("click", sendMessage);
        elements.messageInput.addEventListener("keypress", (e) => {
            if (e.key === "Enter") sendMessage();
        });

        // –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener("beforeunload", async () => {
            try {
                await chatRoomConnection.invoke("LeaveRoom", roomId);
                hangUp();
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏:', err);
            }
        });
    }

    // ==================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ====================
    async function initialize() {
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elements.currentUserDisplay.textContent = currentUser;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ SignalR
        chatRoomConnection.on("Notify", addSystemMessage);
        chatRoomConnection.on("ReceiveMessage", addChatMessage);
        chatRoomConnection.on("UpdateMessage", (messageId, newMessage, user) => {
            const el = document.getElementById(`content-${messageId}`);
            if (el) {
                el.textContent = newMessage;
                addSystemMessage(`${user} –æ–±–Ω–æ–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ`);
            }
        });
        chatRoomConnection.on("DeleteMessage", (messageId, user) => {
            const li = document.querySelector(`li[data-message-id="${messageId}"]`);
            if (li) {
                li.remove();
                addSystemMessage(`${user} —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ`);
            }
        });

        webRtcConnection.on("ReceiveSignal", (senderConnectionId, type, data) => {
            if (type === 'offer') {
                if (!appState.peerConnection) createPeerConnection();
                appState.currentCallConnectionId = senderConnectionId;
                
                appState.peerConnection.setRemoteDescription(new RTCSessionDescription(data))
                    .then(() => appState.peerConnection.createAnswer({
                        offerToReceiveAudio: true,
                        offerToReceiveVideo: elements.enableVideo.checked
                    }))
                    .then(answer => appState.peerConnection.setLocalDescription(answer))
                    .then(() => {
                        webRtcConnection.invoke("SendSignal", senderConnectionId, "answer", appState.peerConnection.localDescription);
                    })
                    .catch(err => {
                        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ offer:', err);
                        hangUp();
                    });
                
                elements.callButton.disabled = true;
                elements.hangupButton.disabled = false;
            } else if (type === 'answer') {
                appState.peerConnection.setRemoteDescription(new RTCSessionDescription(data));
            } else if (type === 'candidate') {
                appState.peerConnection.addIceCandidate(new RTCIceCandidate(data));
            }
        });

        webRtcConnection.on("OnlineUsers", (users) => {
            elements.onlineUsersList.innerHTML = '';
            users.forEach(user => {
                if (user !== webRtcConnection.connectionId) {
                    const li = document.createElement('li');
                    li.textContent = user;
                    li.onclick = () => initiateCall(user);
                    elements.onlineUsersList.appendChild(li);
                }
            });
            elements.onlineUsersContainer.style.display = 'block';
        });

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        window.startEditMessage = async function(messageId) {
            const content = document.getElementById(`content-${messageId}`);
            const currentText = content.textContent;
            content.innerHTML = `
                <input type="text" id="edit-input-${messageId}" value="${currentText}" />
                <button onclick="confirmEdit('${messageId}')">‚úì</button>
                <button onclick="cancelEdit('${messageId}', '${currentText}')">‚úï</button>
            `;
        };

        window.confirmEdit = async function(messageId) {
            const newMessage = document.getElementById(`edit-input-${messageId}`).value.trim();
            if (newMessage) {
                await chatRoomConnection.invoke("UpdateMessage", roomId, currentUser, messageId, newMessage);
            }
        };

        window.cancelEdit = function(messageId, originalText) {
            const content = document.getElementById(`content-${messageId}`);
            content.textContent = originalText;
        };

        window.deleteMessage = async function(messageId) {
            if (confirm("–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?")) {
                await chatRoomConnection.invoke("DeleteMessage", roomId, currentUser, messageId);
            }
        };

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        setupEventListeners();

        // –ó–∞–ø—É—Å–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        try {
            await Promise.all([
                chatRoomConnection.start(),
                webRtcConnection.start()
            ]);
            
            await chatRoomConnection.invoke("JoinRoom", roomId);
            addSystemMessage(`–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
            await requestDeviceAccess();
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', err);
            addSystemMessage("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...");
            setTimeout(initialize, 5000);
        }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    initialize();
</script>

<style>
    body {
        margin: 0;
        padding: 0;
        font-family: Arial, sans-serif;
        background-color: #f5f5f5;
        height: 100vh;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }
    
    .app-container {
        display: flex;
        flex: 1;
        min-height: 0; 
    }
    
    /* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
    .content-area {
        flex: 1;
        padding: 20px;
        background-color: #fff;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
    }
    
    .video-container {
        min-height: 200px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background: #f0f0f0;
        border-radius: 8px;
        margin-bottom: 20px;
        position: relative;
    }
    
    .video-container video {
        width: 100%;
        max-height: 300px;
        background: #000;
        border-radius: 4px;
    }
    
    #audioOnlyIndicator {
        text-align: center;
        padding: 20px;
    }
    
    .audio-call-icon {
        font-size: 48px;
        margin-bottom: 10px;
    }
    
    /* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ */
    .device-controls {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-bottom: 15px;
    }
    
    .device-select-group {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }
    
    .device-select-group label {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 0.9em;
        color: #555;
    }
    
    .device-select {
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        width: 100%;
    }
    
    /* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */
    .webrtc-controls {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
    }
    
    .webrtc-controls button {
        padding: 8px 16px;
        background: #2c5e9e;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        flex: 1;
    }
    
    .webrtc-controls button:disabled {
        background: #ccc;
        cursor: not-allowed;
    }
    
    #requestAccessBtn {
        background: #5cb85c;
    }
    
    #hangupButton {
        background: #d9534f;
    }
    
    /* –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */
    #onlineUsersList {
        list-style: none;
        padding: 0;
        margin: 0;
    }
    
    #onlineUsersList li {
        padding: 8px;
        margin: 5px 0;
        background: #f0f0f0;
        border-radius: 4px;
        cursor: pointer;
    }
    
    #onlineUsersList li:hover {
        background: #e0e0e0;
    }
    
    /* –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö */
    .error-message {
        color: #d9534f;
        background-color: #f2dede;
        padding: 10px;
        border-radius: 4px;
        margin-bottom: 15px;
    }
    
    .warning-message {
        color: #856404;
        background-color: #fff3cd;
        padding: 10px;
        border-radius: 4px;
        margin-bottom: 15px;
        text-align: center;
    }
    
    /* –°—Ç–∏–ª–∏ —á–∞—Ç–∞ */
    .chat-container {
        width: 350px;
        display: flex;
        flex-direction: column;
        background-color: #fff;
        border-left: 1px solid #ddd;
        box-shadow: -2px 0 5px rgba(0,0,0,0.1);
    }
    
    .chat-container h1 {
        font-size: 1.5rem;
        margin: 15px;
        padding-bottom: 15px;
        border-bottom: 1px solid #eee;
    }
    
    .user-info {
        margin: 0 15px 15px;
        font-size: 0.9em;
        color: #555;
    }
    
    .chat-box {
        display: flex;
        flex-direction: column;
        flex: 1;
        min-height: 0;
        padding: 0 15px;
    }

    .message-list {
        flex: 1;
        list-style: none;
        padding: 0;
        margin: 15px 0;
        overflow-y: auto;
        background-color: #fff;
        border: 1px solid #eee;
        border-radius: 4px;
        max-height: 60vh;
    }
    
    .message-list li {
        padding: 10px;
        border-bottom: 1px solid #eee;
    }
    
    .chat-message {
        background: #f0f0f0;
        padding: 12px;
        border-radius: 6px;
        margin-bottom: 10px;
    }
    
    .message-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 5px;
    }
    
    .message-header strong {
        color: #2c5e9e;
    }
    
    .message-actions button {
        background: none;
        border: none;
        cursor: pointer;
        margin-left: 5px;
        color: #666;
    }
    
    .message-actions button:hover {
        color: #2c5e9e;
    }
    
    .system-message {
        color: #666;
        font-style: italic;
        font-size: 0.85em;
        text-align: center;
        padding: 5px 0;
    }
    
    .message-input {
        display: flex;
        gap: 10px;
        margin-bottom: 15px;
        padding: 10px 0;
    }
    
    #messageInput {
        flex: 1;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 14px;
    }
    
    #sendButton {
        padding: 0 20px;
        background: #2c5e9e;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
    }
    
    #sendButton:hover {
        background: #1e4b8a;
    }
</style>