@{
    ViewData["Title"] = "–ì—Ä—É–ø–ø–æ–≤–∞—è –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è";
}

<div class="app-container">
    <!-- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ -->
    <div class="content-area">
        <!-- –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã -->
        <div class="video-container">
            <div id="remoteVideosContainer" class="remote-videos-grid"></div>
            <div id="audioOnlyIndicator">
                <div class="audio-call-icon">üé§</div>
                <div>–ê—É–¥–∏–æ-–∑–≤–æ–Ω–æ–∫</div>
            </div>
            <div id="noDevicesMessage" class="warning-message" style="display:none;">
                –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç.
            </div>
            <div id="errorContainer" class="error-message" style="display:none;"></div>
        </div>

        <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ -->
        <div class="device-controls" id="deviceControls" style="display:none;">
            <div class="device-select-group">
                <label for="microphoneSelect">–ú–∏–∫—Ä–æ—Ñ–æ–Ω:</label>
                <select id="microphoneSelect" class="device-select"></select>
                <button id="toggleMicBtn" class="btn-mic">–í—ã–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω</button>
            </div>
        </div>

        <!-- –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è -->
        <div class="webrtc-controls">
            <button id="stopBroadcastBtn" class="btn btn-danger" disabled>–ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É</button>
        </div>

        <!-- –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è -->
        <div id="connectionStatus" class="connection-status">
            <span class="status-indicator"></span>
            <span class="status-text">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</span>
        </div>
    </div>

    <!-- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —á–∞—Ç–∞ -->
    <div class="chat-container">
        <div class="chat-header">
            <h1>–ö–æ–º–Ω–∞—Ç–∞: <span id="roomIdDisplay">@ViewData["RoomId"]</span></h1>
            <div class="user-info">–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: <span id="currentUserDisplay"></span></div>
        </div>

        <div class="chat-box">
            <ul id="messagesList" class="message-list"></ul>
            <div class="message-input">
                <input type="text" id="messageInput" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." />
                <button id="sendButton" class="btn-send">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
<script>
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const roomId = "@ViewData["RoomId"]";
    const currentUser = "User_" + Math.random().toString(36).substring(2, 8);
    const serverUrl = "https://localhost:7222";

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const appState = {
        localStream: null,
        peerConnections: new Map(),
        hasAudioPermission: false,
        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }],
        isBroadcasting: false,
        currentUserId: null,
        retryCount: 0,
        maxRetries: 5,
        isInitialized: false,
        isMicMuted: false
    };

    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const elements = {
        remoteVideosContainer: document.getElementById('remoteVideosContainer'),
        audioOnlyIndicator: document.getElementById('audioOnlyIndicator'),
        noDevicesMessage: document.getElementById('noDevicesMessage'),
        microphoneSelect: document.getElementById('microphoneSelect'),
        deviceControls: document.getElementById('deviceControls'),
        stopBroadcastBtn: document.getElementById('stopBroadcastBtn'),
        messagesList: document.getElementById('messagesList'),
        messageInput: document.getElementById('messageInput'),
        sendButton: document.getElementById('sendButton'),
        currentUserDisplay: document.getElementById('currentUserDisplay'),
        errorContainer: document.getElementById('errorContainer'),
        connectionStatus: document.querySelector('.connection-status'),
        statusText: document.querySelector('.status-text'),
        statusIndicator: document.querySelector('.status-indicator'),
        roomIdDisplay: document.getElementById('roomIdDisplay'),
        toggleMicBtn: document.getElementById('toggleMicBtn')
    };

    // SignalR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const chatRoomConnection = new signalR.HubConnectionBuilder()
        .withUrl(`${serverUrl}/chatHub`)
        .withAutomaticReconnect({
            nextRetryDelayInMilliseconds: retryContext => {
                if (retryContext.elapsedMilliseconds < 60000) {
                    return Math.random() * 2000 + 2000;
                }
                return null;
            }
        })
        .configureLogging(signalR.LogLevel.Warning)
        .build();

    const webRtcConnection = new signalR.HubConnectionBuilder()
        .withUrl(`${serverUrl}/WebRTCHub`)
        .withAutomaticReconnect({
            nextRetryDelayInMilliseconds: retryContext => {
                if (retryContext.elapsedMilliseconds < 60000) {
                    return Math.random() * 2000 + 2000;
                }
                return null;
            }
        })
        .configureLogging(signalR.LogLevel.Warning)
        .build();

    // ==================== –§—É–Ω–∫—Ü–∏–∏ —á–∞—Ç–∞ ====================
    function addSystemMessage(message) {
        const li = document.createElement("li");
        li.className = "system-message";
        li.textContent = message;
        elements.messagesList.appendChild(li);
        scrollToBottom();
    }

    function addChatMessage(user, message, messageId) {
        const li = document.createElement("li");
        li.className = user === currentUser ? "chat-message my-message" : "chat-message";
        li.setAttribute("data-message-id", messageId);
        
        const isCurrentUser = user === currentUser;
        const actions = isCurrentUser ? `
            <div class="message-actions">
                <button onclick="startEditMessage('${messageId}')">‚úèÔ∏è</button>
                <button onclick="deleteMessage('${messageId}')">üóëÔ∏è</button>
            </div>
        ` : '';
        
        li.innerHTML = `
            <div class="message-header">
                ${!isCurrentUser ? `<strong>${user}</strong>` : ''}
                ${actions}
                ${isCurrentUser ? `<strong>${user}</strong>` : ''}
            </div>
            <div id="content-${messageId}">${message}</div>
        `;
        elements.messagesList.appendChild(li);
        scrollToBottom();
    }

    async function sendMessage() {
        const message = elements.messageInput.value.trim();
        if (message && isConnectionReady()) {
            try {
                await chatRoomConnection.invoke("SendMessage", roomId, currentUser, message);
                elements.messageInput.value = "";
            } catch (err) {
                showError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: " + err.message);
                console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
            }
        }
    }

    // ==================== WebRTC —Ñ—É–Ω–∫—Ü–∏–∏ ====================
    async function requestDeviceAccess() {
        try {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            const devices = await navigator.mediaDevices.enumerateDevices();
            
            appState.hasAudioPermission = devices.some(d => d.kind === 'audioinput' && d.label !== '');
            
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ç–æ–∫
            stream.getTracks().forEach(track => track.stop());

            await updateDeviceLists();
            elements.deviceControls.style.display = 'block';
            hideError();

            if (!appState.hasAudioPermission) {
                elements.noDevicesMessage.style.display = 'block';
                return false;
            }

            return true;
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º:', err);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç.');
            elements.noDevicesMessage.style.display = 'block';
            return false;
        }
    }

    async function updateDeviceLists() {
        try {
            const devices = await navigator.mediaDevices.enumerateDevices();
            const microphones = devices.filter(d => d.kind === 'audioinput');
            
            populateSelect(elements.microphoneSelect, microphones, '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
            elements.microphoneSelect.disabled = microphones.length === 0;

            return { microphones };
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', err);
            showError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤');
            return { microphones: [] };
        }
    }

    function populateSelect(selectElement, devices, emptyMessage) {
        selectElement.innerHTML = '';
        
        if (devices.length === 0) {
            const option = document.createElement('option');
            option.text = emptyMessage;
            selectElement.appendChild(option);
            selectElement.disabled = true;
            return;
        }
        
        const defaultOption = document.createElement('option');
        defaultOption.text = '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é';
        defaultOption.value = '';
        selectElement.appendChild(defaultOption);
        
        devices.forEach(device => {
            const option = document.createElement('option');
            option.value = device.deviceId;
            option.text = device.label || `–ú–∏–∫—Ä–æ—Ñ–æ–Ω ${device.deviceId.substring(0, 4)}`;
            selectElement.appendChild(option);
        });
        
        selectElement.disabled = false;
    }

    async function startLocalStream() {
        try {
            if (appState.localStream) {
                appState.localStream.getTracks().forEach(track => track.stop());
            }

            const constraints = {
                audio: elements.microphoneSelect.value ? 
                    { deviceId: { exact: elements.microphoneSelect.value } } : true
            };

            appState.localStream = await navigator.mediaDevices.getUserMedia(constraints);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            toggleMicrophone(!appState.isMicMuted);
            
            return true;
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞:', err);
            showError('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞: ' + err.message);
            return false;
        }
    }

    function toggleMicrophone(enable) {
        if (!appState.localStream) return;
        
        appState.isMicMuted = !enable;
        appState.localStream.getAudioTracks().forEach(track => {
            track.enabled = enable;
        });
        
        elements.toggleMicBtn.textContent = enable ? '–í—ã–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω' : '–í–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω';
    }

    async function startBroadcast() {
        if (!appState.localStream) {
            const success = await startLocalStream();
            if (!success) {
                showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
                return;
            }
        }

        try {
            appState.isBroadcasting = true;
            elements.stopBroadcastBtn.disabled = false;
            
            await webRtcConnection.invoke("JoinGroup", roomId);
            await webRtcConnection.invoke("SendSignal", roomId, appState.currentUserId, "broadcastStarted", null);
            
            addSystemMessage('–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∞—É–¥–∏–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏');
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏:', err);
            showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + err.message);
            stopBroadcast();
        }
    }

    async function createPeerConnection(targetUserId) {
        try {
            if (appState.peerConnections.has(targetUserId) ){
                return;
            }

            console.log(`–°–æ–∑–¥–∞–Ω–∏–µ PeerConnection –¥–ª—è ${targetUserId}`);
            
            const peerConnection = new RTCPeerConnection({ 
                iceServers: appState.iceServers,
                sdpSemantics: 'unified-plan'
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ç—Ä–µ–∫
            if (appState.localStream) {
                appState.localStream.getAudioTracks().forEach(track => {
                    peerConnection.addTrack(track, appState.localStream);
                });
            }

            peerConnection.onicecandidate = event => {
                if (event.candidate) {
                    webRtcConnection.invoke("SendSignal", roomId, appState.currentUserId, "candidate", {
                        targetId: targetUserId,
                        candidate: event.candidate
                    }).catch(err => {
                        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ICE candidate:', err);
                    });
                }
            };
            
            peerConnection.oniceconnectionstatechange = () => {
                console.log(`ICE —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ${targetUserId}:`, peerConnection.iceConnectionState);
                if (peerConnection.iceConnectionState === 'failed') {
                    console.log(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${targetUserId} –ø—Ä–µ—Ä–≤–∞–Ω–æ`);
                    removePeerConnection(targetUserId);
                }
            };
            
            peerConnection.ontrack = event => {
                if (!event.streams || event.streams.length === 0) return;
                console.log(`–ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ –æ—Ç ${targetUserId}`);
                addRemoteVideo(targetUserId, event.streams[0]);
            };

            const offer = await peerConnection.createOffer({
                offerToReceiveAudio: true
            });
            await peerConnection.setLocalDescription(offer);
            
            await webRtcConnection.invoke("SendSignal", roomId, appState.currentUserId, "offer", {
                targetId: targetUserId,
                offer: peerConnection.localDescription
            });
            
            appState.peerConnections.set(targetUserId, peerConnection);
            
        } catch (err) {
            console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${targetUserId}:`, err);
            removePeerConnection(targetUserId);
        }
    }

    async function handleOffer(senderUserId, data) {
        try {
            if (!appState.localStream) {
                const success = await startLocalStream();
                if (!success) {
                    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ offer');
                    return;
                }
            }
            
            if (appState.peerConnections.has(senderUserId)) {
                console.log(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${senderUserId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                return;
            }

            console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ offer –æ—Ç ${senderUserId}`);

            const peerConnection = new RTCPeerConnection({ 
                iceServers: appState.iceServers,
                sdpSemantics: 'unified-plan'
            });
            
            if (appState.localStream) {
                appState.localStream.getAudioTracks().forEach(track => {
                    peerConnection.addTrack(track, appState.localStream);
                });
            }

            peerConnection.onicecandidate = async event => {
                if (event.candidate) {
                    await webRtcConnection.invoke("SendSignal", roomId, appState.currentUserId, "answer", {
                        targetId: senderUserId,
                        answer: peerConnection.localDescription
                    }).catch(err => {
                        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ICE candidate:', err);
                    });
                }
            };
            
            peerConnection.ontrack = event => {
                if (!event.streams || event.streams.length === 0) return;
                console.log(`–ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ –æ—Ç ${senderUserId}`);
                addRemoteVideo(senderUserId, event.streams[0]);
            };

            await peerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));
            const answer = await peerConnection.createAnswer();
            await peerConnection.setLocalDescription(answer);
            
            await webRtcConnection.invoke("SendSignalToGroup", roomId, appState.currentUserId, "answer", {
                targetId: senderUserId,
                answer: peerConnection.localDescription
            });
            
            appState.peerConnections.set(senderUserId, peerConnection);
            
        } catch (err) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç ${senderUserId}:`, err);
            removePeerConnection(senderUserId);
        }
    }

    function addRemoteVideo(userId, stream) {
        const existingVideo = document.getElementById(`remoteVideo-${userId}`);
        if (existingVideo) {
            existingVideo.srcObject = stream;
            return;
        }

        const videoContainer = document.createElement('div');
        videoContainer.className = 'remote-video-container';
        videoContainer.id = `remoteContainer-${userId}`;
        
        const video = document.createElement('video');
        video.id = `remoteVideo-${userId}`;
        video.autoplay = true;
        video.playsinline = true;
        video.srcObject = stream;
        
        const userIdLabel = document.createElement('div');
        userIdLabel.className = 'remote-user-id';
        userIdLabel.textContent = `User ${userId.substring(0, 6)}`;
        
        videoContainer.appendChild(video);
        videoContainer.appendChild(userIdLabel);
        elements.remoteVideosContainer.appendChild(videoContainer);
    }

    function removePeerConnection(userId) {
        console.log(`–£–¥–∞–ª–µ–Ω–∏–µ PeerConnection –¥–ª—è ${userId}`);
        
        const peerConnection = appState.peerConnections.get(userId);
        if (peerConnection) {
            peerConnection.close();
            appState.peerConnections.delete(userId);
        }
        
        const videoContainer = document.getElementById(`remoteContainer-${userId}`);
        if (videoContainer) videoContainer.remove();
    }

    function stopBroadcast() {
        try {
            appState.isBroadcasting = false;
            elements.stopBroadcastBtn.disabled = true;
            
            appState.peerConnections.forEach((pc, userId) => {
                pc.close();
                removePeerConnection(userId);
            });
            
            appState.peerConnections.clear();
            
            if (appState.localStream) {
                appState.localStream.getTracks().forEach(track => track.stop());
                appState.localStream = null;
            }
            
            webRtcConnection.invoke("LeaveGroup", roomId).catch(err => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥—Ä—É–ø–ø—ã:', err);
            });
            
            addSystemMessage('–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∞—É–¥–∏–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é');
            
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
            setTimeout(() => {
                window.location.href = '/';
            }, 1000);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏:', err);
            showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã: ' + err.message);
        }
    }

    // ==================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ====================
    function isConnectionReady() {
        return webRtcConnection.state === signalR.HubConnectionState.Connected && 
               chatRoomConnection.state === signalR.HubConnectionState.Connected;
    }

    function showError(message) {
        console.error(message);
        elements.errorContainer.textContent = message;
        elements.errorContainer.style.display = 'block';
        
        setTimeout(() => {
            elements.errorContainer.style.display = 'none';
        }, 5000);
    }

    function hideError() {
        elements.errorContainer.style.display = 'none';
    }

    function scrollToBottom() {
        elements.messagesList.scrollTop = elements.messagesList.scrollHeight;
    }

    function updateConnectionStatus(isConnected) {
        elements.statusIndicator.className = isConnected ? 'status-indicator connected' : 'status-indicator disconnected';
        elements.statusText.textContent = isConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ';
    }

    // ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ====================
    function setupEventListeners() {
        elements.microphoneSelect.addEventListener('change', async () => {
            if (appState.localStream) {
                await startLocalStream();
            }
        });

        elements.toggleMicBtn.addEventListener('click', () => {
            toggleMicrophone(appState.isMicMuted);
        });

        elements.stopBroadcastBtn.addEventListener('click', stopBroadcast);

        elements.sendButton.addEventListener("click", sendMessage);
        elements.messageInput.addEventListener("keypress", (e) => {
            if (e.key === "Enter") sendMessage();
        });

        window.addEventListener("beforeunload", async () => {
            try {
                if (appState.isBroadcasting) {
                    await webRtcConnection.invoke("LeaveGroup", roomId);
                }
                await chatRoomConnection.invoke("LeaveRoom", roomId);
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏:', err);
            }
        });
    }

    // ==================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ====================
    async function initialize() {
        if (appState.isInitialized) return;
        appState.isInitialized = true;

        elements.currentUserDisplay.textContent = currentUser;
        elements.roomIdDisplay.textContent = roomId;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ SignalR –¥–ª—è —á–∞—Ç–∞
        chatRoomConnection.on("Notify", (message) => {
            addSystemMessage(message);
        });

        chatRoomConnection.on("ReceiveMessage", (user, message, messageId) => {
            addChatMessage(user, message, messageId);
        });

        chatRoomConnection.on("UpdateMessage", (messageId, newMessage, user) => {
            const el = document.getElementById(`content-${messageId}`);
            if (el) el.textContent = newMessage;
        });

        chatRoomConnection.on("DeleteMessage", (messageId, user) => {
            const li = document.querySelector(`li[data-message-id="${messageId}"]`);
            if (li) li.remove();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ SignalR –¥–ª—è WebRTC
        webRtcConnection.on("ReceiveSignal", async (senderUserId, type, data) => {
            try {
                if (senderUserId === appState.currentUserId) return;

                console.log(`–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${type} –æ—Ç ${senderUserId}`);

                if (type === 'broadcastStarted' && appState.isBroadcasting) {
                    await createPeerConnection(senderUserId);
                }
                else if (type === 'offer') {
                    await handleOffer(senderUserId, data);
                } 
                else if (type === 'answer') {
                    const pc = appState.peerConnections.get(senderUserId);
                    if (pc) await pc.setRemoteDescription(new RTCSessionDescription(data.answer));
                } 
                else if (type === 'candidate') {
                    const pc = appState.peerConnections.get(senderUserId);
                    if (pc) await pc.addIceCandidate(new RTCIceCandidate(data.candidate));
                }
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞:', err);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        const handleConnectionState = (connection, connectionName) => {
            connection.onreconnecting(() => {
                updateConnectionStatus(false);
                addSystemMessage(`–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${connectionName}...`);
            });

            connection.onreconnected(() => {
                updateConnectionStatus(true);
                addSystemMessage(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${connectionName} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
                
                if (connection === webRtcConnection && appState.isBroadcasting) {
                    webRtcConnection.invoke("JoinGroup", roomId).catch(err => {
                        console.error("–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ:", err);
                    });
                }
            });

            connection.onclose(() => {
                updateConnectionStatus(false);
                addSystemMessage(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${connectionName} –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...`);
            });
        };

        handleConnectionState(chatRoomConnection, "—á–∞—Ç–æ–º");
        handleConnectionState(webRtcConnection, "WebRTC");

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        window.startEditMessage = async function(messageId) {
            const content = document.getElementById(`content-${messageId}`);
            const currentText = content.textContent;
            content.innerHTML = `
                <input type="text" id="edit-input-${messageId}" value="${currentText}" />
                <button onclick="confirmEdit('${messageId}')">‚úì</button>
                <button onclick="cancelEdit('${messageId}', '${currentText}')">‚úï</button>
            `;
            document.getElementById(`edit-input-${messageId}`).focus();
        };

        window.confirmEdit = async function(messageId) {
            const newMessage = document.getElementById(`edit-input-${messageId}`).value.trim();
            if (newMessage) {
                try {
                    await chatRoomConnection.invoke("UpdateMessage", roomId, currentUser, messageId, newMessage);
                } catch (err) {
                    showError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: " + err.message);
                }
            }
        };

        window.cancelEdit = function(messageId, originalText) {
            const content = document.getElementById(`content-${messageId}`);
            content.textContent = originalText;
        };

        window.deleteMessage = async function(messageId) {
            if (confirm("–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?")) {
                try {
                    await chatRoomConnection.invoke("DeleteMessage", roomId, currentUser, messageId);
                } catch (err) {
                    showError("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: " + err.message);
                }
            }
        };

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        setupEventListeners();

        // –ó–∞–ø—É—Å–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        try {
            await Promise.all([
                chatRoomConnection.start(),
                webRtcConnection.start()
            ]);
            
            appState.currentUserId = webRtcConnection.connectionId;
            await chatRoomConnection.invoke("JoinRoom", roomId);
            updateConnectionStatus(true);
            
            addSystemMessage(`–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é
            const hasDevices = await requestDeviceAccess();
            if (hasDevices) {
                await startLocalStream();
                await startBroadcast();
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', err);
            addSystemMessage("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...");
            
            if (appState.retryCount < appState.maxRetries) {
                appState.retryCount++;
                setTimeout(initialize, 5000);
            } else {
                showError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
            }
        }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    document.addEventListener('DOMContentLoaded', initialize);
</script>
<style>
    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f5f5f5;
        color: #333;
        height: 100vh;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    .app-container {
        display: flex;
        flex: 1;
        min-height: 0;
        height: 100%;
    }

    .content-area {
        flex: 1;
        padding: 20px;
        background-color: white;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
    }

    .video-container {
        min-height: 200px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background: #f5f5f5;
        border-radius: 8px;
        margin-bottom: 20px;
        position: relative;
        padding: 10px;
    }

    #localVideo {
        width: 100%;
        max-height: 300px;
        background: black;
        border-radius: 4px;
        transform: scaleX(-1);
    }

    .remote-videos-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 15px;
        width: 100%;
        margin-top: 15px;
    }

    .remote-video-container {
        position: relative;
        background: black;
        border-radius: 6px;
        overflow: hidden;
        aspect-ratio: 16/9;
    }

    .remote-video-container video {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .remote-user-id {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        background: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 8px;
        font-size: 14px;
    }

    #audioOnlyIndicator {
        text-align: center;
        padding: 20px;
        background: #f5f5f5;
        border-radius: 8px;
        margin: 10px 0;
    }

    .audio-call-icon {
        font-size: 48px;
        margin-bottom: 10px;
    }

    .device-controls {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin-bottom: 20px;
        background: #f5f5f5;
        padding: 15px;
        border-radius: 8px;
    }

    .device-select-group {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    .device-select-group label {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 0.95em;
        color: #555;
    }

    .device-select {
        padding: 8px 12px;
        border: 1px solid #ddd;
        border-radius: 4px;
        width: 100%;
        background: white;
        font-size: 0.9em;
    }

    .webrtc-controls {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
    }

    .btn {
        padding: 10px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        font-size: 0.95em;
        transition: all 0.2s;
        flex: 1;
        text-align: center;
    }

    .btn:hover {
        opacity: 0.9;
        transform: translateY(-1px);
    }

    .btn:active {
        transform: translateY(0);
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }

    .btn-primary {
        background: #2c5e9e;
        color: white;
    }

    .btn-success {
        background: #5cb85c;
        color: white;
    }

    .btn-danger {
        background: #d9534f;
        color: white;
    }

    .connection-status {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-top: 10px;
        font-size: 0.9em;
    }

    .status-indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
    }

    .status-indicator.connected {
        background: #5cb85c;
    }

    .status-indicator.disconnected {
        background: #d9534f;
    }

    .error-message {
        color: white;
        background-color: #d9534f;
        padding: 12px;
        border-radius: 4px;
        margin-bottom: 15px;
        font-size: 0.9em;
    }

    .warning-message {
        color: #856404;
        background-color: #fff3cd;
        padding: 12px;
        border-radius: 4px;
        margin-bottom: 15px;
        text-align: center;
        font-size: 0.9em;
    }

    .chat-container {
        width: 350px;
        display: flex;
        flex-direction: column;
        background-color: white;
        border-left: 1px solid #ddd;
        box-shadow: -2px 0 5px rgba(0,0,0,0.05);
    }

    .chat-header {
        padding: 15px;
        border-bottom: 1px solid #ddd;
    }

    .chat-header h1 {
        font-size: 1.4rem;
        margin-bottom: 10px;
    }

    .user-info {
        font-size: 0.9em;
        color: #555;
    }

    .chat-box {
        display: flex;
        flex-direction: column;
        flex: 1;
        min-height: 0;
    }

    .message-list {
        flex: 1;
        list-style: none;
        overflow-y: auto;
        padding: 10px;
    }

    .message-list li {
        margin-bottom: 12px;
    }

    .chat-message {
        background: #f5f5f5;
        padding: 12px;
        border-radius: 8px;
    }

    .message-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 6px;
    }

    .message-header strong {
        color: #2c5e9e;
        font-weight: 500;
    }

    .message-actions button {
        background: none;
        border: none;
        cursor: pointer;
        margin-left: 8px;
        color: #555;
        font-size: 0.9em;
        opacity: 0.7;
        transition: opacity 0.2s;
    }

    .message-actions button:hover {
        opacity: 1;
    }

    .system-message {
        color: #666;
        font-style: italic;
        font-size: 0.85em;
        text-align: center;
        padding: 8px 0;
    }

    .message-input {
        display: flex;
        gap: 10px;
        padding: 15px;
        border-top: 1px solid #ddd;
    }

    #messageInput {
        flex: 1;
        padding: 10px 12px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 0.95em;
    }

    #messageInput:focus {
        outline: none;
        border-color: #2c5e9e;
    }

    .btn-send {
        padding: 0 20px;
        background: #2c5e9e;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.95em;
        transition: background 0.2s;
    }

    .btn-send:hover {
        background: #1e4b8a;
    }
</style>