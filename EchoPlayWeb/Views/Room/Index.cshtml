@{
    ViewData["Title"] = "Чат комната";
}

<div class="container">
    <h1>Чат комната: <span id="roomIdDisplay">@ViewData["RoomId"]</span></h1>
    
    <div class="chat-box">
        <ul id="messagesList" class="message-list"></ul>
        <div class="message-input">
            <input type="text" id="messageInput" placeholder="Введите сообщение..." />
            <button id="sendButton">Отправить</button>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
<script>
    const roomId = "@ViewData["RoomId"]";
    const currentUser = "User_" + Math.random().toString(36).substring(2, 8);
    console.log("Room ID:", roomId, "User:", currentUser);

    // Подключение к RoomHub
    const roomConnection = new signalR.HubConnectionBuilder()
        .withUrl("https://localhost:7222/roomHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    // Подключение к ChatHub
    const chatConnection = new signalR.HubConnectionBuilder()
        .withUrl("https://localhost:7222/chatHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    // Обработчики для RoomHub
    roomConnection.on("Notify", (message) => {
        addSystemMessage(message);
    });

    // Обработчики для ChatHub
    chatConnection.on("ReceiveMessage", (user, message) => {
        addMessageToChat(user, message);
    });

    function addMessageToChat(user, message) {
        const li = document.createElement("li");
        li.innerHTML = `<strong>${user}:</strong> ${message}`;
        document.getElementById("messagesList").appendChild(li);
        scrollToBottom();
    }

    function addSystemMessage(message) {
        const li = document.createElement("li");
        li.className = "system-message";
        li.textContent = message;
        document.getElementById("messagesList").appendChild(li);
        scrollToBottom();
    }

    function scrollToBottom() {
        const messagesList = document.getElementById("messagesList");
        messagesList.scrollTop = messagesList.scrollHeight;
    }

    async function sendMessage() {
        const messageInput = document.getElementById("messageInput");
        const message = messageInput.value.trim();
        
        if (message && chatConnection.state === signalR.HubConnectionState.Connected) {
            try {
                await chatConnection.invoke("SendMessage", roomId, currentUser, message);
                messageInput.value = "";
            } catch (err) {
                console.error("Ошибка отправки:", err);
            }
        }
    }

    async function startConnections() {
        try {
            // Запускаем оба подключения
            await Promise.all([
                roomConnection.start(),
                chatConnection.start()
            ]);
            
            console.log("Подключения установлены");
            await roomConnection.invoke("JoinRoom", roomId);
            
            roomConnection.onclose(async () => {
                console.log("Разрыв соединения с RoomHub. Переподключение...");
                await startConnections();
            });
            
            chatConnection.onclose(async () => {
                console.log("Разрыв соединения с ChatHub. Переподключение...");
                await startConnections();
            });
        } catch (err) {
            console.error("Ошибка подключения:", err);
            setTimeout(startConnections, 5000);
        }
    }

    document.getElementById("sendButton").addEventListener("click", sendMessage);
    document.getElementById("messageInput").addEventListener("keypress", (e) => {
        if (e.key === "Enter") sendMessage();
    });

    window.addEventListener("beforeunload", async () => {
        if (roomConnection.state === signalR.HubConnectionState.Connected) {
            await roomConnection.invoke("LeaveRoom", roomId);
        }
    });

    startConnections();
</script>

<style>
    .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        font-family: Arial, sans-serif;
    }
    
    .chat-box {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        background: #f9f9f9;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .message-list {
        list-style: none;
        padding: 0;
        height: 400px;
        overflow-y: auto;
        border: 1px solid #eee;
        background: white;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 4px;
    }
    
    .message-list li {
        padding: 8px 0;
        border-bottom: 1px solid #eee;
    }
    
    .message-list li:last-child {
        border-bottom: none;
    }
    
    .system-message {
        color: #666;
        font-style: italic;
        font-size: 0.9em;
    }
    
    .message-input {
        display: flex;
        gap: 10px;
    }
    
    #messageInput {
        flex: 1;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 16px;
    }
    
    #sendButton {
        padding: 10px 20px;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
    }
    
    #sendButton:hover {
        background: #0069d9;
    }
    
    #roomIdDisplay {
        color: #007bff;
        font-weight: bold;
    }
</style>